Darmstadt, 28.08.2018

# introduction
This is a little manual to use the tools designed after the "Projektseminar Beschleunigertechnik" in 2018 by Artem Moskalev, Maximilian Nolte, Jonas Christ under care of Jens Harzheim
It offers three different and partly independent functions:
1) calculate the transfer-function H and nonlinearity K (mainly executing the work of the previous Projektseminar by Denys Bast and Armin Galetzka)
2) use an iterative optimization of H
3) use an iterative optimization of K

# preamble
The programme is only tested with the Keysight 33600A (33622A) Waveform Generator and the Tektronix TDS 5054 DOS. See "Handhabung.md" (German) for further information about the used hardware and how to use it.
We highly recommend to be aware that every processing of tests and optimization routine creates additional and sometimes useless data 
	This data is especially saved in the subfolders of tests/mock_data/mock_results or in the folder tests/Bilder (used by the tool to evaluate the quality of a signal).
	When using version control or to save memory, this is of special interest and you can delete the contens.

# measurement results
Measurement results generated by the single calculation of H and K will be stored under data/get_blocks followed by date and time of the execution
Measurement results generated by the optimization routines will be stored in data/optimizer/ followed by the name of the optimizer (adjust_H / adjust_a) combined with date and time of the execution
Measurement results generated in tests or with use of the mock-system will be stored in tests/mock_data/mock_results.


# for the impatient:
	- launch pycharm or similar IDE
	- open settings.py
	- open runme.py
	- enter / manipulate parameter in settings.py
	- (un-)comment, which routine you want to use**:
		(1) calculate H and K: uncomment line with evaluate_with_BBsignal
		(2) use optimization of H: uncomment line with evaluate_adjust_H
		(3) use optimization of K: uncomment line with evaluate_adjust_a
		
	- run runme.py in IDE
	
# parameter in settings.py
## basic: 
	- use_mock_system: flag, defining whether to use (True) or not use (False) the mock-system. Operating on the cavity to do measurements, this has to be set to False
	- f_rep: Repetition frequency of the signal
	- f_BB: Barrier-Bucket-Frequency, frequency of the singlesine to be generated*
	- sample_rate_AWG: the (highest) Sample-Rate of the Function-Generator used, only tested for the Keysight
	- sample_rate_DSO: the (highest) Sample-Rate of the Oscilloscope used, only tested for the Tektronix-Model
	- max_input_vpp_amplifier: the maximum input voltage the amplifier is allowed to receive. Default value 1 V is with a lot of safety, not checked in the data sheet
	- add_final_comment: flag, defining whether you want to add a comment at the end of a routine into the console which will then be saved as a txt-file.
	- polynomial_order: highest exponent of polynom K 
	- Vpp_for_determine_a: the peak-to-peak-voltage of the INPUT - signal with which the parameters a will be calculated. This is used for every routine calculating a but not for the adjustment of a
	
## (1) to get only H and K:
	- get_H_K_Vpp: peak-to-peak-voltage with which the ideal signal will be instantiated
	- get_H_K_save_to_csv: list of flags defining which values will be saved (1 or True) as csv files. First entry is used to save all:
		[0] save all data
		[1] save H as measured by the tool of the previous "Projektseminar"
		[2] save the parameters a of the polynom K
		[3] save the nonlinearity K as complete polynom
		[4] save complete set of signals: ideal (calculated) Uquest, Uin_measured, Uout_measured as calculated by H and K to fit the perfect output signal
		
		
## parameters for adjust H only (iterative optimization of H)
	- number_iterations_H: number of iterations the optimizer will execute
	- sigma_H: step with of the optimization, has to be between 0 and 1
	- adjust_H_Vpp: peak-to-peak-voltage of the ideal signal with which the optimization will execute
	- adjust_H_save_to_csv: list of flags defining which values will be saved as csv files. first entry is used to save all:
		[0] save all data
		[1] save initial H, calculated before the start of the optimization
		[2] save K calculated before the start of the optimization
		[3] save measured input and output signals in every step. Not processed, meaning not reduced to one period
		[4] save complete set of signals used in every step: Uin_calculated, Uin_measured, Uquest, Uout_measured. in contrast to [3], signals are reduced to one period of f_rep
		[5] save adjusted H in every step
	- use_rms: flag, defining whether to use the RMS-cutter in optimization of H
	- ratio_of_rms_to_ignore: the ratio of the calculated (original) rms, under which values are ignored for calculating the adopted rms used as threshold
	- use_zero_padding: flag, definin whether to use zero-padding to enlarge resolution of spectrums. Will triple the amount of points to calculate the spectrum to ensure more points than in H
	- ratio_to_cut: ratio of spectrums, under which all values are ignored. 
	- default_ratio_in_spectre: ratio which will be used to define the default-value on which to reset all values to be ignored by ratio_to_cut


## parameters for adjust_a only (iterative optimization of K)
	- number_iterations_K: number of iterations the optimizer will execute
	- adjust_K_Vpp = 3
	- sigma_a: step with of the optimization, has to be between 0 and 1
	- adjust_a_save_to_csv: list of flags defining which values will be saved as csv files. first entry is used to save all:
		[0] save all data
		[1] save initial H (measured)
		[2] save parameters a
		[3]	save inital K
		[4]	save in every step Uin_measured and Uout_measured before being reduced to one period of f_rep
		[5] save in every step Uin_measured, Uout_measured, calculated ideal Uquest and Uquest used to calculate Uin (maybe adopted to range of K and thus be different from first Uquest)
		[6] save adjusted a and K in every step

	
## explanation for variables you should be very sure you want to change:
	- project_path: the path / folder-structure on which the whole process is running, including all directories necessary. By last version, this is equal to 'nichtLinear'
	- mock-system: instantiating the global mock-object
	- mock_data_path: the path on which the mock-system is operating, where its default values are defined and data is stored
	- test_data_path: the path where results of unit-tests are saved
	- get_H_data_path_real_system: path on which the blocks of the mock-systems are stored
	- get_H_data_path_mock: further definition of path where mock-system is operating on 
	
	
* notice: in the current version, singlesine is generated using an internal routine, not the RF-Tool from TEMF
** notice: You don't have to care about the return parameters, these are just to be consistent with tests in TDD and for further programming. Everything of relevance can be stored in csv-files




Further Notices more interesting for future programmers, especially considering refactoring:

Notices on TDD: 
By final Version of Code (28.08.2018), there are three tests which can not be succeded with all possible sets of parameters in settings.py but could be useful at least for debugging:
	- test_evaluate_adjust_H_5_steps: older version of a test, useful for debugging and understanding of adjust_H
	- test_loop_adjust_H: depending on number of steps defined in the test, the quality of signals gets worse, which cannot be detected as successful by actual test. 
		This is accepted at the moment because different settings lead to different numbers of steps over which the quality gets better
	- test_evaluate_adjust_a_3_steps: 
The run of all tests in all_tezts.py takes nearly ten minutes - it should be possible to execute just single tests and not all thirty (see python package nose)
	
Notices on getH:
This method run in the mock-system still saves extra data in mock_data/get_H, which can be useful depending on the purpose.
	
Notices on determine_a: 
By final Version of Code, there is no strict line on the amplitude of which a is determined. Here, this is set once as the peak-to-peak-voltage of the INPUT signal. Maybe in other cases it could be more useful to keep the amplitude of Uquest.
	
Notices on adjust_a:
by final Version of Code, the adjusted Polynom has the same order as the one with which the optimization started. See documentation of adjust_a for more details.
	
Notices on write_to_AWG:
By end of this project, a solution for the runtime of the AWG and the connection to other devices was implemented in another work (a bachelor thesis under care of Dilyana Domont-Yankulova) which could not be included here due to time reasons.
