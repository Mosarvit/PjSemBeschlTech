Darmstadt, 28.08.2018

This is a little manual to use the tools designed after the "Projektseminar Beschleunigertechnik" in 2018 by Artem Moskalev, Maximilian Nolte, Jonas Christ under care of Jens Harzheim
It offers three different and partly independent functions:
1) calculate the transfer-function H and nonlinearity K (mainly executing the work of the previous Projektseminar by Denys Bast and Armin Galetzka)
2) use an iterative optimization of H
3) use an iterative optimization of K

The programme is only tested with the Keysight 33600A (33622A) Waveform Generator and the Tektronix TDS 5054 DOS. See "Handhabung.md" (German) for further information about the used hardware.
We highly recommend to be aware that every run of tests can create additional trash-data in the folder tests/mock_data/mock_results, in 

Data generated by the single calculation of H and K will be stored under data/get_blocks followed by date and time of the execution
Data generated by the optimization routines will be stored under data/optimizer/ followed by the name of the optimizer combined with date and time of the execution

# for the impatient:
	- launch pycharm or similar IDE
	- open settings.py
	- open runme.py
	- enter / manipulate parameter in settings.py
	- (un-)comment, which routine you want to use:
		(1) calculate H and K: uncomment evaluate_with_BBsignal
		(2) use optimization of H: uncomment evaluate_adjust_H
		(3) use optimization of K: uncomment evaluate_adjust_a
	- run runme.py in IDE
	
# parameter in settings.py
## basic: 
	- use_mock_system: flag, defining whether to use (True) or not use (False) the mock-system. Operating on the cavity to do measurements, this has to be set to False
	- f_rep: Repetition frequency of the signal
	- f_BB: Barrier-Bucket-Frequency, frequency of the singlesine to be generated*
	- sample_rate_AWG: the (highest) Sample-Rate of the Function-Generator used, only tested for the Keysight
	- sample_rate_DSO: the (highest) Sample-Rate of the Oscilloscope used, only tested for the Tektronix-Model
	- max_input_vpp_amplifier: the maximum input voltage the amplifier is allowed to receive. Default value 1 V is with a lot of safety, not checked in the data sheet
	- add_final_comment: flag, defining whether you want to add a comment at the end of a routine into the console which will then be saved as a txt-file. available in the optimization-routines
	
## parameters for adjust H (iterative optimization of H)
	- number_iterations: number of iterations the optimizer will execute
	- sigma_H: step with of the optimization, has to be between 0 and 1
	- adjust_H_Vpp: peak-to-peak-voltage of the ideal signal with which the optimization will execute
	- adjust_H_Vpp_K: peak-to-peak-voltage that will be used to calculate K. supposed to be larger than adjust_H_Vpp
	- adjust_H_save_to_csv: list of flags defining which values will be saved as csv files. first entry is used to save all:
		[0] save all data
		[1] save initial H, calculated before the start of the optimization
		[2] save K calculated before the start of the optimization
		[3] save measured input and output signals in every step. Not processed, meaning not reduced to one period
		[4] save complete set of signals used in every step: Uin_calculated, Uin_measured, Uquest, Uout_measured. in contrast to [3], signals are reduced to one period of f_rep
		[5] save adjusted H in every step
	- use_rms: flag, defining whether to use the RMS-cutter in optimization of H
	- ratio_of_rms_to_ignore: the ratio of the calculated (original) rms, under which values are ignored for calculating the adopted rms used as threshold
	- use_zero_padding: flag, definin whether to use zero-padding to enlarge resolution of spectrums. Will triple the amount of points to calculate the spectrum to ensure more points than in H
	- ratio_to_cut: ratio of spectrums, under which all values are ignored. 
default_ratio_in_spectre = 3e-3

	
## explanation for variables you should not change:
	- project_path: the path / folder-structure on which the whole process is running, including all directories necessary. By last version, this is equal to 'nichtLinear'
	- mock-system: instantiating the global mock-object
	- mock_data_path: the path on which the mock-system is operating, where its default values are defined and data is stored
	- test_data_path: the path where results of unit-tests are saved
	


	
	
* notice: in the current version, singlesine is generated using an internal routine, not the RF-Tool from TEMF



Notices on TDD: 
By final Version of Code (28.08.2018), there are three tests which can not be completed with every set of parameters in settings.py but could be useful for debugging:
	- test_evaluate_adjust_H_5_steps: older version of a test, useful for debugging and understanding of adjust_H
	- test_loop_adjust_H: depending on number of steps defined in the test, the quality of signals gets worse, which cannot be detected as successful by actual test. 
		This is accepted at the moment because different settings lead to different numbers of steps over which the quality gets better
	- test_evaluate_adjust_a_3_steps: 
	

get_H_data_path_real_system = project_path + '/data/get_H/'
get_H_data_path_mock = mock_data_path + '/mock_data/get_H/'
show_plots = 1 # ob die Plots angenzeigt werden sollen
verbosity = 0
last_directory_used = '000'

def set_last_directory_used(value):
    global last_directory_used   # declare a to be a global
    last_directory_used = value



