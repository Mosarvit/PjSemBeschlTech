import sys,os,time
import rftools_bcf
import matplotlib.pyplot as plt
from pandas import read_csv
import numpy as np


"""
output_file = "output.bcf"
os.system("python rfgen_singlesine.py -o {} -a 1 -n 1000 -p 1 --fpulse 1e6 --frep 250e3 --noise 0.01".format(output_file))
os.system("python rfconvert_bcf2csv.py -i {} -o {}".format(output_file,"output_gen"))
fin = rftools_bcf.ReadBCF(output_file, flag_read_all=True)
t = fin.return_data(segment_nr=0, column_nr=0, start_row=0, end_row=-1, step=1)
y = fin.return_data(segment_nr=0, column_nr=1, start_row=0, end_row=-1, step=1)

plt.plot(t,y, linewidth = 0.4)
plt.show()
"""

def Signal_reshape(Startindex,Vorzeichen,t,dataPointsSignal):
	result = []
	temp = []
	temp.append(Startindex)
	temp.append(Vorzeichen)
	temp.append(t[0])
	temp.append(dataPointsSignal[0])
	result.append(temp)

	for i in range(1,len(t)):
		temp = []
		temp.append(None)
		temp.append(None)
		temp.append(t[i])
		temp.append(dataPointsSignal[i])
		result.append(temp)
	return np.array(result)
"""
#Reading input file
input_file = read_csv("Signal_output.csv")
#print(input_file)
Startindex = input_file.values[:,1][0]
Vorzeichen = input_file.values[:,2][0]
dataPointsSignal = input_file.values[:,3]

if len(np.where(np.isnan(dataPointsSignal))[0]) != 0:
	dataPointsSignal = dataPointsSignal[0:np.where(np.isnan(dataPointsSignal))[0][0]]
t = input_file.values[:,4]
"""
#Write the BCF output file

output_string = "output.bcf"
# This is the current time in steps of 100 nanoseconds (cf. the document with the definition of the BCF file format):
time_stamp = time.time()*1e7
header_description = 'Generated by Hamma'
keys_string = 'device=Hamma'

column_information = [(0, 0, 1, 'Info'), (6, 6, 1, 't/s')]
#column_information = [(6, 6, 1, 't/s'), (103, 3, 1, 'y/V'),(103, 3, 1, 'y/V') ]
# This calls the constructor of the WriteBCF class:
outfile = rftools_bcf.WriteBCF(output_string, time_stamp, header_description, keys_string, column_information)

# First write the header:
outfile.write_header()

# Now write the segments:
relative_time = 0
#x = Signal_reshape(Startindex,Vorzeichen,t,dataPointsSignal)
#x = x [0:4]
#print(x)
x = []
x.append(["Hi",1])
x.append(["Hello,2"])
x = np.array(x)
x = x.reshape((1,len(x)))
#ones = np.ones(len(t))

#x = np.stack((t, dataPointsSignal,ones), axis=-1)

outfile.write_segment(relative_time*1e7, x)

# Write the keys, this finishes the file:
outfile.write_keys()

#Success
print("Output file " + output_string + " has been written.")
os.system("python rfconvert_bcf2csv.py -i {} -o {} -d 1".format(output_string,"output_converted"))
